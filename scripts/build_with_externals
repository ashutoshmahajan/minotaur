#!/bin/bash

#
# Fetches externals, compiles externals and builds minotaur with those
# externals. Or compiles minotaur with previously built externals.
#

usage () 
{
   echo ""
   echo "usage: ./build_with_externals -d build-directory 
   -M minotaur-directory [-e externals-directory] [-j num-cpus] [-l log-file]
   [-abcfiosx]"
   echo ""
   echo "-a: Do not use asl while building. Disabled by default."
   echo "-b: Enable debug."
   echo "-c: Do not use cpp-unittest while building. Disabled by default."
   echo "-C: Use curl instead of wget to fetch externals."
   echo "-d: Directory where Minotaur binaries will be build."
   echo "-e: Directory where all externals have been compiled. If this 
    directory does not exist, we will download and compile the externals here.
    If this option is not specified, the externals will be built in the
    directory \"minotaur-externals\" inside the build-directory provided with
    \"-d\" option. "
   echo "-f: Do not use filtersqp and bqpd while building. Disabled by default."
   echo "-i: Do not use ipopt while building. Disabled by default."
   echo "-j: Number of CPUs to use for compiling."
   echo "-l: Full path to log file. Default is /dev/null"
   echo "-M: Directory where Minotaur source code is available."
   echo "-O: Use Mac-OS specific compile flags."
   echo "-o: Do not use osi while building. Disabled by default."
   echo "-s: Build static libraries instead of shared."
   echo "-x: Use manual makefile to build minotaur, instead of using configure."
   echo ""
   echo -n "typical usage: ./build_with_externals"
   echo -n " -d ./build -M . -j 8 -b"
   echo ""
   echo -n "typical usage on Mac: ./build_with_externals"
   echo -n " -d ./build -M . -j 8 -b -C -O -s"
   echo ""
}

USE_ASL=1
USE_CPPUNIT=1
USE_FILTERSQP=1
USE_BQPD=1
USE_IPOPT=1
USE_OSI=1
USE_CURL=0
USE_MAC=0

ASL="asl-20150602"
CPPUNIT="cppunit-1.13.2"
OSI="clp-1.16.6"
IPOPT="ipopt-3.12.3"
FILTERSQP="filter-102"
BQPD="bqpd-3"

LOG=
ERR=
CPUS=1
ENABLE_STATIC=0
ENABLE_DEBUG=0
CONFIG_MINO=1
BUILD_ARGS=

UMINOTAUR=
UDEST=
UEDEST=

## read arguments
while getopts "abcCd:e:fij:l:M:oOr:sx" flag
do
  case ${flag} in
    a) USE_ASL=0 ;;
    b) ENABLE_DEBUG=1 ;;
    c) USE_CPPUNIT=0 ;;
    C) USE_CURL=1  ;;
    d) UDEST=${OPTARG} ;;
    e) UEDEST=${OPTARG} ;;
    f) USE_FILTERSQP=0 ;;
    i) USE_IPOPT=0 ;;
    j) CPUS=${OPTARG} ;;
    l) LOG=${OPTARG} ;;
    M) UMINOTAUR=${OPTARG} ;;
    o) USE_OSI=0 ;;
    O) USE_MAC=1  ;;
    r) ERR=${OPTARG} ;;
    s) ENABLE_STATIC=1 ;;
    x) CONFIG_MINO=0 ;;
    *) echo "invalid option ${flag}"; usage; exit 1;;
  esac
done

## TODO: make this work for bqpd alone.
USE_BQPD=$USE_FILTERSQP

## set log
if [ "x${LOG}" != "x" ]
then
  exec 1>>${LOG}
fi
if [ "x${ERR}" != "x" ]
then
  exec 2>>${ERR}
fi

## check arguments
if [ "x${UDEST}" == "x" ]
then
  echo>&2 ""
  echo>&2 "error! the directory where minotaur is to be built must be provided"
  usage
  exit 1
fi

if [ -e ${UDEST} ]
then
  echo>&2 ""
  echo>&2 "error! the directory ${UDEST} already exists. remove it or provide another path."
  echo>&2 ""
  exit 1
fi


if [ "x${UMINOTAUR}" == "x" ]
then
  echo>&2 ""
  echo>&2 "error! the directory where minotaur src is located must be provided"
  echo>&2 ""
  usage
  exit 1
fi

if [ "${USE_CURL}" == "1" ]
then
  echo "will use curl instead of wget to fetch externals."
  BUILD_ARGS="${BUILD_ARGS} -C"
fi


if [ "${USE_MAC}" == "1" ]
then
  echo "will use mac specific flags for compiling externals."
  BUILD_ARGS="${BUILD_ARGS} -O"
fi

if [ "${ENABLE_STATIC}" == "1" ]
then
  echo "will use static flags for compiling externals."
  BUILD_ARGS="${BUILD_ARGS} -s"
fi

if [ "${USE_IPOPT}" == "0" ]
then
  echo "will disable ipopt."
  BUILD_ARGS="${BUILD_ARGS} -i"
fi

MINOTAUR=`cd ${UMINOTAUR}; pwd`

if [ ! -e ${MINOTAUR}/src/base/MinotaurConfig.h.cmake ]
then
  echo>&2 ""
  echo>&2 "Minotaur src is not located in the specified directory ${MINOTAUR}"
  echo>&2 ""
  usage
  exit 1
fi

mkdir ${UDEST}
DEST=`cd ${UDEST}; pwd`

echo "Minotaur src directory is ${MINOTAUR}"
echo "Minotaur will be built in ${DEST}"

EDEST=
BUILD_EXTERNALS=0
if [ "x${UEDEST}" == "x" ]
then
  EDEST=${DEST}
  BUILD_EXTERNALS=1
  echo ""
  echo "No directory specified for external dependencies. Setting it to ${EDEST}."
elif [ -d ${UEDEST} ]
then
  EDEST=`cd ${UEDEST}; pwd`
  echo "Using externals already compiled in ${EDEST}"
else
  mkdir ${UEDEST}
  EDEST=`cd ${UEDEST}; pwd`
  BUILD_EXTERNALS=1
  echo "Fetching and compiling externals in ${EDEST}"
fi

if (( ${BUILD_EXTERNALS} == 1 ))
then
  ${MINOTAUR}/scripts/build_externals -d ${EDEST} -j ${CPUS} ${BUILD_ARGS}
  ## we change EDEST to EDEST/minotaur-externals
  tmp=${EDEST}
  EDEST=${tmp}/minotaur-externals
fi

if (( ${CONFIG_MINO}==1 ))
then
  ## prepare the configure arguments
  CARGS="-DBOOST_INC_DIR:PATH=${EDEST} "

  if (( ${USE_ASL}==1 ))
  then
    CARGS+=" -DASL_LIB_DIR:PATH=${EDEST}/${ASL}" 
    CARGS+=" -DASL_INC_DIR:PATH=${EDEST}/${ASL}" 
  fi
  if (( ${USE_BQPD}==1 ))
  then
    CARGS+=" -DBQPD_LIB_DIR:PATH=${EDEST}/${BQPD}"  
  fi
  if (( ${USE_FILTERSQP}==1 ))
  then
    CARGS+=" -DFILTER_LIB_DIR:PATH=${EDEST}/${FILTERSQP}/src"  
  fi
  if (( ${USE_IPOPT}==1 ))
  then
    CARGS+=" -DIPOPT_INC_DIR:PATH=${EDEST}/${IPOPT}/build/include/"
    CARGS+=" -DIPOPT_LIB_DIR:PATH=${EDEST}/${IPOPT}/build/lib/"
  fi
  if (( ${USE_OSI}==1 ))
  then
    CARGS+=" -DOSI_INC_DIR:PATH=${EDEST}/${OSI}/build/include/"
    CARGS+=" -DOSI_LIB_DIR:PATH=${EDEST}/${OSI}/build/lib/"
    CARGS+=" -DOSICLP:BOOL=ON"
  fi
  if (( ${USE_CPPUNIT}==1 ))
  then
    CARGS+=" -DCPPUNIT_INC_DIR:PATH=${EDEST}/${CPPUNIT}/build/include/"
    CARGS+=" -DCPPUNIT_LIB_DIR:PATH=${EDEST}/${CPPUNIT}/build/lib" 
  fi
  if (( ${ENABLE_DEBUG}==1 ))
  then 
    CARGS+=" -DCMAKE_BUILD_TYPE:String=Debug" 
    ##CARGS+=" --enable-debug"
    ##else
    ##CARGS+=" --enable-debug=no"
  fi
  if (( ${ENABLE_STATIC}==1 ))
  then 
    CARGS+=" -DBUILD_SHARED_LIBS:BOOL=0"
    ##CARGS+=" --enable-static --disable-shared"
  else
    CARGS+=" -DBUILD_SHARED_LIBS:BOOL=1"
  fi

  echo "all arguments: ${CARGS}"
  ## build it.
  cd ${DEST}
  cmake ${CARGS} ${MINOTAUR}
  make -j ${CPUS} install
  if [ -e bin/bnb ]
  then
    echo "Minotaur built in ${DEST}"
  else
    echo "Minotaur not built in ${DEST}"
  fi
else
  cd ${DEST}
  cp ${MINOTAUR}/Makefile.manual Makefile
  make -j ${CPUS} BQPD_LIB=${EDEST}/${BQPD}/libbqpd.a FILTERSQP_LIB=${EDEST}/${FILTERSQP}/src/libfiltersqp.a IPOPT_INST=${EDEST}/${IPOPT}/build OSI_INST=${EDEST}/${OSI}/build AMPL_INST=${EDEST}/${ASL} BOOST_INC=${EDEST} MINOTAUR=${MINOTAUR} EXTRA_LIBS="-lcoinmumps -lz -lbz2"
  if [ -e bin/bnb ]
  then
    echo "Minotaur built in ${DEST}"
  else
    echo "Minotaur not built in ${DEST}"
  fi
fi

